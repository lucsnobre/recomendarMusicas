#include "music_system.h"

// Implementa√ß√£o da integra√ß√£o com Lua (simulada)
void MusicRecommendationSystem::executeLuaScript(const std::string& scriptPath) {
    std::cout << "üåô Iniciando integra√ß√£o com Lua..." << std::endl;
    std::cout << "üìÑ Carregando script: " << scriptPath << std::endl;
    
    // Simula a execu√ß√£o do script Lua
    std::cout << "\nüéµ Executando algoritmo personalizado de recomenda√ß√£o..." << std::endl;
    std::cout << "üìä Analisando padr√µes de escuta..." << std::endl;
    std::cout << "üîç Sugerindo novas descobertas musicais..." << std::endl;
    std::cout << "üåà Analisando diversidade da sua biblioteca..." << std::endl;
    
    // Simula resultados da an√°lise Lua
    std::cout << "\n‚ú® RESULTADOS DA AN√ÅLISE LUA:\n";
    std::cout << std::string(45, '-') << std::endl;
    
    std::string mostPlayedGenre = getMostPlayedGenre();
    std::string mostPlayedMood = getMostPlayedMood();
    
    // Recomenda√ß√µes baseadas no g√™nero favorito
    if (mostPlayedGenre == "Rock") {
        std::cout << "üé∏ Sugest√£o Lua: Experimente Progressive Rock!\n";
        std::cout << "üé§ Artistas recomendados: Pink Floyd, Yes, Genesis\n";
    } else if (mostPlayedGenre == "Pop") {
        std::cout << "üéµ Sugest√£o Lua: Que tal Indie Pop?\n";
        std::cout << "üé§ Artistas recomendados: Arctic Monkeys, The Strokes\n";
    } else {
        std::cout << "üéµ Sugest√£o Lua: Explore novos g√™neros baseados no seu gosto!\n";
    }
    
    // An√°lise de humor
    if (mostPlayedMood == "energico") {
        std::cout << "‚ö° Para manter a energia: Electronic Dance Music!\n";
    } else if (mostPlayedMood == "relaxante") {
        std::cout << "üåä Para relaxar mais: Ambient, Chillout\n";
    } else {
        std::cout << "üòä Dica Lua: Experimente m√∫sicas com humores diferentes!\n";
    }
    
    // An√°lise de diversidade
    int genreCount = genrePlayCount.size();
    int artistCount = artistPlayCount.size();
    int diversityScore = std::min(100, (genreCount * 10) + (artistCount * 3));
    
    std::cout << "\nüåà AN√ÅLISE DE DIVERSIDADE:\n";
    std::cout << "‚Ä¢ G√™neros na biblioteca: " << genreCount << std::endl;
    std::cout << "‚Ä¢ Artistas diferentes: " << artistCount << std::endl;
    std::cout << "‚Ä¢ Score de diversidade: " << diversityScore << "/100\n";
    
    if (diversityScore < 50) {
        std::cout << "üí° Dica Lua: Sua biblioteca precisa de mais variedade!\n";
    } else if (diversityScore > 80) {
        std::cout << "üéâ Parab√©ns! Voc√™ tem uma biblioteca bem diversificada!\n";
    }
    
    // Padr√µes de escuta simulados
    std::cout << "\nüìà PADR√ïES DETECTADOS:\n";
    std::cout << "‚Ä¢ Hor√°rios de pico: 19:00-21:00, 14:00-16:00\n";
    std::cout << "‚Ä¢ Evolu√ß√£o musical: " << mostPlayedGenre << " -> Explora√ß√£o\n";
    std::cout << "‚Ä¢ Tend√™ncia de humor: Mais " << mostPlayedMood << " recentemente\n";
    
    std::cout << "\n‚úÖ An√°lise Lua conclu√≠da com sucesso! üéâ" << std::endl;
}

void MusicRecommendationSystem::createCustomRecommendation(const std::string& luaFunction) {
    std::cout << "üîß Executando fun√ß√£o personalizada: " << luaFunction << std::endl;
    
    // Simula execu√ß√£o de fun√ß√£o Lua personalizada
    if (luaFunction == "mood_playlist") {
        std::cout << "üé≠ Criando playlist baseada no humor mais tocado..." << std::endl;
        std::string mood = getMostPlayedMood();
        
        auto moodSongs = filterByMood(mood);
        if (!moodSongs.empty()) {
            std::string playlistName = "Playlist " + mood + " (Lua)";
            createPlaylist(playlistName);
            
            for (size_t i = 0; i < std::min(size_t(5), moodSongs.size()); ++i) {
                addToPlaylist(playlistName, moodSongs[i]->getName());
            }
            
            std::cout << "‚úÖ Playlist criada pelo algoritmo Lua: " << playlistName << std::endl;
        }
    } else if (luaFunction == "similarity_analysis") {
        std::cout << "üîç Analisando similaridade entre m√∫sicas..." << std::endl;
        
        auto topSongs = getMostPlayedSongs(3);
        if (topSongs.size() >= 2) {
            std::cout << "üìä Comparando suas m√∫sicas favoritas:\n";
            for (size_t i = 0; i < topSongs.size() - 1; ++i) {
                for (size_t j = i + 1; j < topSongs.size(); ++j) {
                    int similarity = 0;
                    
                    // Calcula similaridade simples
                    if (topSongs[i]->getGenre() == topSongs[j]->getGenre()) similarity += 30;
                    if (topSongs[i]->getArtist() == topSongs[j]->getArtist()) similarity += 40;
                    if (topSongs[i]->getMood() == topSongs[j]->getMood()) similarity += 20;
                    
                    std::cout << "‚Ä¢ " << topSongs[i]->getName() << " vs " 
                              << topSongs[j]->getName() << ": " << similarity << "% similar\n";
                }
            }
        }
    }
}

// Fun√ß√µes de exporta√ß√£o/importa√ß√£o JSON simuladas
void MusicRecommendationSystem::exportToJSON(const std::string& filename) const {
    std::cout << "üìÑ Exportando para JSON: " << filename << std::endl;
    
    std::ofstream file(filename);
    if (!file.is_open()) {
        std::cout << "‚ùå Erro ao criar arquivo JSON!" << std::endl;
        return;
    }
    
    file << "{\n";
    file << "  \"music_library\": [\n";
    
    for (size_t i = 0; i < musicLibrary.size(); ++i) {
        const auto& music = musicLibrary[i];
        file << "    {\n";
        file << "      \"name\": \"" << music.getName() << "\",\n";
        file << "      \"artist\": \"" << music.getArtist() << "\",\n";
        file << "      \"album\": \"" << music.getAlbum() << "\",\n";
        file << "      \"genre\": \"" << music.getGenre() << "\",\n";
        file << "      \"rating\": " << music.getRating() << ",\n";
        file << "      \"mood\": \"" << music.getMood() << "\",\n";
        file << "      \"play_count\": " << music.getPlayCount() << "\n";
        file << "    }";
        
        if (i < musicLibrary.size() - 1) file << ",";
        file << "\n";
    }
    
    file << "  ],\n";
    file << "  \"playlists\": [\n";
    
    for (size_t i = 0; i < playlists.size(); ++i) {
        const auto& playlist = playlists[i];
        file << "    {\n";
        file << "      \"name\": \"" << playlist.getName() << "\",\n";
        file << "      \"songs\": [";
        
        const auto& songs = playlist.getSongs();
        for (size_t j = 0; j < songs.size(); ++j) {
            file << "\"" << songs[j]->getName() << "\"";
            if (j < songs.size() - 1) file << ", ";
        }
        
        file << "]\n    }";
        if (i < playlists.size() - 1) file << ",";
        file << "\n";
    }
    
    file << "  ]\n";
    file << "}\n";
    
    file.close();
    std::cout << "‚úÖ Dados exportados para JSON com sucesso! üìÑ" << std::endl;
}

void MusicRecommendationSystem::importFromJSON(const std::string& filename) {
    std::cout << "üìÇ Importando de JSON: " << filename << std::endl;
    
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cout << "‚ùå Arquivo JSON n√£o encontrado!" << std::endl;
        return;
    }
    
    // Simula importa√ß√£o JSON (implementa√ß√£o b√°sica)
    std::cout << "üìÑ Lendo arquivo JSON..." << std::endl;
    std::cout << "üîÑ Processando dados..." << std::endl;
    std::cout << "‚úÖ Importa√ß√£o JSON simulada conclu√≠da!" << std::endl;
    
    file.close();
}
